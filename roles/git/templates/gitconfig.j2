[alias]

    a   = commit --amend
    br  = branch
    c   = commit
    ca  = !git add -A && git commit                 # Commit all changes
    co  = checkout
    cp  = cherry-pick
    d   = diff
    dc  = diff --cached
    f   = fetch
    g   = log --graph --pretty=custom               # Show custom graph
    l   = log --pretty=custom                       # Show custom log
    lc  = shortlog --summary --numbered             # List contributors
    p   = push
    r   = rebase
    rlc = !git reset --hard HEAD~1                  # Remove last commit
    s   = status
    ulc = reset --soft HEAD~1                       # Undo last commit
    w   = instaweb --httpd=webrick

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[core]

    abbrev = 12
    attributesfile = ~/config/git/.gitattributes
    autocrlf = input
    editor = nvim
    excludesfile = ~/.config/git/gitignore
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space
    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)



[diff]

    # Detect copies as well as renames
    renames = copies

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]

    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[pull]

    # Make `git pull` automatically rebase
    rebase = true
[user]

    # Don't guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true
	name = {{ git_user_full_name }}
	email = {{ git_user_email }}
{% if git_signing_key %}
    signingkey = {{ git_signing_key }}
{% endif %}

{% if git_user_github %}
[github]
    user = {{ git_user_github }}
{% endif %}
